{"version":3,"file":"static/js/779.5b1a4c3d.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","components/service/moviesAPI.js"],"sourcesContent":["import { Grid } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <Grid\n      height=\"80\"\n      width=\"80\"\n      color=\"rgb(214, 227, 75)\"\n      ariaLabel=\"grid-loading\"\n      radius=\"12.5\"\n      wrapperStyle={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\n\nexport const Photo = styled.img`\n  margin-top: 20px;\n  margin-right: 5px;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n`;\nexport const Name = styled.p`\n  display: block;\n  width: 150px;\n  margin-right: 5px;\n  text-align: center;\n  overflow: auto;\n`;\nexport const Text = styled.p`\n  display: block;\n  margin-right: 5px;\n  max-width: 800px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: flex-start;\n  margin: 10px;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const User = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: center;\n  width: 150px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from '../Loader/Loader';\nimport { getReviewById } from '../service/moviesAPI';\nimport { Photo, Item, User, Name, Text } from './Reviews.styled';\nimport PropTypes from 'prop-types';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [review, setReview] = useState([]);\n  const [status, setStatus] = useState('');\n\n  useEffect(() => {\n    setStatus('LOADING');\n    try {\n      getReviewById(movieId).then(response => {\n        const movieReview = response.map(\n          ({ author_details, content, created_at, state }) => {\n            if (\n              author_details.avatar_path === null ||\n              author_details.avatar_path.includes('/https')\n            ) {\n              author_details.avatar_path =\n                'https://upload.wikimedia.org/wikipedia/commons/1/12/User_icon_2.svg';\n              return { author_details, content, created_at };\n            } else {\n              author_details.avatar_path = `https://image.tmdb.org/t/p/original/${author_details.avatar_path}`;\n              return { author_details, content, created_at };\n            }\n          }\n        );\n        setReview([...movieReview]);\n        setStatus('OK');\n      });\n    } catch (error) {\n      setStatus('ERROR');\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      <h2>Review</h2>\n      <ul>\n        {review.map(review => (\n          <Item key={review.created_at}>\n            <User>\n              <Photo src={review.author_details.avatar_path} alt=\"user\" />\n              <Name>{review.author_details.username}</Name>\n            </User>\n            <Text>\n              {review.content}{' '}\n              <span>\n                Create at: {new Date(review.created_at).toDateString()}\n              </span>\n            </Text>\n          </Item>\n        ))}\n      </ul>\n      {review.length === 0 && <p>There are no reviews.</p>}\n      {status === 'LOADING' && <Loader />}\n    </>\n  );\n};\n\nReviews.propTypes = {\n  state: PropTypes.object,\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = '19c88c04b5d6ef941f0dea95d7f513c3';\n\naxios.defaults.baseURL = URL;\n\nexport const getTrends = async pageNumber => {\n  const response = await axios(`trending/movie/day`, {\n    params: {\n      page: pageNumber,\n      api_key: KEY,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios(`movie/${movieId}`, {\n    params: {\n      query: movieId,\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getMovieByKeyword = async (keyword, pageNumber) => {\n  const response = await axios(`search/movie`, {\n    params: {\n      query: keyword,\n      page: pageNumber,\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getCreditsById = async movieId => {\n  const response = await axios(`movie/${movieId}/credits`, {\n    params: {\n      query: movieId,\n      api_key: KEY,\n    },\n  });\n\n  return response.data.cast;\n};\n\nexport const getReviewById = async movieId => {\n  const response = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      query: movieId,\n      api_key: KEY,\n    },\n  });\n\n  return response.data.results;\n};\n"],"names":["height","width","color","ariaLabel","radius","wrapperStyle","display","justifyContent","alignItems","wrapperClass","visible","Photo","styled","Name","Text","Item","User","movieId","useParams","useState","review","setReview","status","setStatus","useEffect","getReviewById","then","response","movieReview","map","author_details","content","created_at","state","avatar_path","includes","error","src","alt","username","Date","toDateString","length","Loader","KEY","axios","getTrends","pageNumber","params","page","api_key","data","results","getMovieById","query","getMovieByKeyword","keyword","getCreditsById","cast"],"sourceRoot":""}