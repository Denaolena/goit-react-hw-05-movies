{"version":3,"file":"static/js/387.68c20bc2.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx","components/service/moviesAPI.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 10px;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const Photo = styled.img`\n  width: 200px;\n  heigth: 255px;\n`;\nexport const Item = styled.li`\n  max-width: 200px;\n  margin: 10px;\n`;\n\nexport const Name = styled.p`\n  max-width: 200px;\n  font-size: 14px;\n  text-decoration: none;\n  color: black;\n  margin-bottom: 5px;\n`;\nexport const Character = styled.p`\n  max-width: 200px;\n  font-size: 14px;\n  text-decoration: none;\n  color: black;\n  margin-bottom: 5px;\n`;\nexport const Popularity = styled.p`\n  max-width: 200px;\n  font-size: 14px;\n  text-decoration: none;\n  color: black;\n  margin-bottom: 5px;\n`;\n\nexport const Caption = styled.span`\n  display: block;\n  font-size: 16px;\n  text-decoration: none;\n  color: black;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from '../Loader/Loader';\nimport { getCreditsById } from '../service/moviesAPI';\nimport {\n  List,\n  Photo,\n  Item,\n  Name,\n  Character,\n  Popularity,\n  Caption,\n} from './Cast.styled';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nconst Cast = ({ state }) => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState('');\n\n  useEffect(() => {\n    setStatus('LOADING');\n    try {\n      getCreditsById(movieId).then(response => {\n        const movieCast = response.map(\n          ({ character, name, popularity, profile_path, state }) => {\n            return {\n              realId: nanoid(),\n              character: character === '' ? 'No information' : character,\n              name: name === '' ? 'No information' : name,\n              popularity: popularity === '' ? 'No information' : popularity,\n              profile_path:\n                profile_path === null || profile_path === ''\n                  ? `https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg`\n                  : `https://image.tmdb.org/t/p/original/${profile_path}`,\n            };\n          }\n        );\n        setCast([...movieCast]);\n        setStatus('OK');\n      });\n    } catch (error) {\n      setStatus('ERROR');\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      <h2>Cast</h2>\n      <List>\n        {cast.map(actor => (\n          <Item key={actor.realId}>\n            <Character>\n              <Caption>Character:</Caption>\n              {actor.character}\n            </Character>\n            <Name>\n              <Caption>Name:</Caption>\n              {actor.name}\n            </Name>\n            <Popularity>\n              <Caption>Popularity:</Caption>\n              {actor.popularity}\n            </Popularity>\n            <Photo src={actor.profile_path} alt=\"actor\" />\n          </Item>\n        ))}\n      </List>\n      {cast.length === 0 && <p>No information about the cast.</p>}\n      {status === 'LOADING' && <Loader />}\n    </>\n  );\n};\n\nCast.propTypes = {\n  state: PropTypes.object,\n};\n\nexport default Cast;\n","import { Grid } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <Grid\n      height=\"80\"\n      width=\"80\"\n      color=\"#4fa94d\"\n      ariaLabel=\"grid-loading\"\n      radius=\"12.5\"\n      wrapperStyle={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = '19c88c04b5d6ef941f0dea95d7f513c3';\n\naxios.defaults.baseURL = URL;\n\nexport const getTrends = async pageNumber => {\n  const response = await axios(`trending/movie/day`, {\n    params: {\n      page: pageNumber,\n      api_key: KEY,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios(`movie/${movieId}`, {\n    params: {\n      query: movieId,\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getMovieByKeyword = async (keyword, pageNumber) => {\n  const response = await axios(`search/movie`, {\n    params: {\n      query: keyword,\n      page: pageNumber,\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getCreditsById = async movieId => {\n  const response = await axios(`movie/${movieId}/credits`, {\n    params: {\n      query: movieId,\n      api_key: KEY,\n    },\n  });\n\n  return response.data.cast;\n};\n\nexport const getReviewById = async movieId => {\n  const response = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      query: movieId,\n      api_key: KEY,\n    },\n  });\n\n  return response.data.results;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["List","styled","Photo","Item","Name","Character","Popularity","Caption","state","movieId","useParams","useState","cast","setCast","status","setStatus","useEffect","getCreditsById","then","response","movieCast","map","character","name","popularity","profile_path","realId","nanoid","error","actor","src","alt","length","Loader","height","width","color","ariaLabel","radius","wrapperStyle","display","justifyContent","alignItems","wrapperClass","visible","KEY","axios","getTrends","pageNumber","params","page","api_key","data","results","getMovieById","query","getMovieByKeyword","keyword","getReviewById","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}